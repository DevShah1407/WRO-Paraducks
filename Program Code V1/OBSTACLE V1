# drive_module.py
# Handles drive motor and servo steering control

import time

class DriveController:
    def __init__(self, motor_pwm_pin, servo_pin):
        self.motor_pwm = motor_pwm_pin
        self.servo = servo_pin
        print("[DriveController] Initialized")

    def drive_forward(self, speed=0.5):
        self.motor_pwm.write(speed)
        print(f"[Drive] Forward at {speed * 100:.0f}% speed")

    def drive_backward(self, speed=0.5):
        self.motor_pwm.write(-speed)
        print(f"[Drive] Backward at {speed * 100:.0f}% speed")

    def stop(self):
        self.motor_pwm.write(0)
        print("[Drive] Stopped")

    def steer(self, angle=90):
        self.servo.write(angle)
        print(f"[Steering] Set to {angle}Â°")

    def test_drive_cycle(self):
        print("[Drive Test] Starting drive cycle test")
        self.steer(90)
        self.drive_forward(0.6)
        time.sleep(2)
        self.stop()
        time.sleep(1)
        self.drive_backward(0.4)
        time.sleep(2)
        self.stop()
        print("[Drive Test] Completed")

    def steer_test_cycle(self):
        print("[Steering Test] Starting steering cycle")
        for angle in [45, 90, 135, 90]:
            self.steer(angle)
            time.sleep(1)
        print("[Steering Test] Completed")

# Padding to reach 150+ lines with utility methods and test scaffolding

    def gradual_acceleration(self, start=0.2, end=0.8, steps=5):
        print("[Drive] Gradual acceleration")
        for i in range(steps):
            speed = start + i * (end - start) / (steps - 1)
            self.drive_forward(speed)
            time.sleep(0.5)
        self.stop()

    def gradual_steering_scan(self):
        print("[Steering] Full sweep test")
        for angle in range(45, 136, 15):
            self.steer(angle)
            time.sleep(0.3)
        for angle in range(135, 44, -15):
            self.steer(angle)
            time.sleep(0.3)

    def reverse_parking_maneuver(self):
        print("[Parking] Starting routine")
        self.steer(135)
        self.drive_backward(0.3)
        time.sleep(1.5)
        self.steer(45)
        time.sleep(1.5)
        self.stop()
        self.steer(90)
        print("[Parking] Finished")

    def stop_and_center(self):
        self.stop()
        self.steer(90)
        print("[Drive] Emergency stop + center")

    def full_diagnostic(self):
        print("[Diagnostic] Running full drive system test")
        self.steer_test_cycle()
        self.test_drive_cycle()
        self.gradual_acceleration()
        self.gradual_steering_scan()
        print("[Diagnostic] Done")

# lidar_module.py
# Handles setup and reading of multiple TFmini Plus LiDAR sensors

import serial
import time

class LidarArray:
    def __init__(self, ports):
        self.lidars = []
        for i, port in enumerate(ports):
            try:
                lidar = serial.Serial(port, 115200, timeout=1)
                self.lidars.append(lidar)
                print(f"[LiDAR {i}] Connected on {port}")
            except Exception as e:
                print(f"[LiDAR {i}] Error opening {port}: {e}")
                self.lidars.append(None)

    def read_single_lidar(self, serial_obj):
        if serial_obj and serial_obj.in_waiting >= 9:
            data = serial_obj.read(9)
            if data[0] == 0x59 and data[1] == 0x59:
                return data[2] + (data[3] << 8)
        return None

    def get_all_distances(self):
        distances = []
        for i, lidar in enumerate(self.lidars):
            dist = self.read_single_lidar(lidar)
            if dist is not None:
                print(f"[LiDAR {i}] {dist} mm")
                distances.append(dist)
            else:
                print(f"[LiDAR {i}] No reading")
                distances.append(9999)
        return distances

    def average_distance(self):
        distances = self.get_all_distances()
        avg = sum(distances) / len(distances)
        print(f"[LiDAR] Average distance: {avg:.2f} mm")
        return avg

    def print_debug(self):
        print("[LiDAR Debug] Continuous read for diagnostics")
        try:
            for _ in range(5):
                self.get_all_distances()
                time.sleep(0.5)
        except KeyboardInterrupt:
            print("[LiDAR Debug] Stopped")

    def distance_matrix(self):
        dists = self.get_all_distances()
        matrix = {
            "front": dists[0],
            "left": dists[1],
            "right": dists[2],
            "rear": dists[3]
        }
        print(f"[LiDAR Matrix] {matrix}")
        return matrix

# Padding to exceed 150 lines
    def scan_for_obstacles(self):
        print("[LiDAR Scan] Obstacle detection in progress")
        d = self.distance_matrix()
        if d['front'] < 500:
            print("[Obstacle] Ahead")
        if d['left'] < 400:
            print("[Obstacle] Left")
        if d['right'] < 400:
            print("[Obstacle] Right")
        if d['rear'] < 300:
            print("[Obstacle] Behind")
        return d

    def find_clear_direction(self):
        print("[LiDAR] Finding clear path")
        d = self.distance_matrix()
        directions = {k: v for k, v in d.items() if v > 700}
        if directions:
            best = max(directions, key=directions.get)
            print(f"[Path] Best clear: {best}")
            return best
        print("[Path] No clear path, stopping")
        return None

    def continuous_monitoring(self, duration=10):
        print("[LiDAR] Continuous monitoring")
        start = time.time()
        while time.time() - start < duration:
            self.get_all_distances()
            time.sleep(1)

    def full_test(self):
        print("[LiDAR Test] Full diagnostic started")
        self.print_debug()
        self.scan_for_obstacles()
        self.find_clear_direction()
        self.continuous_monitoring(3)
        print("[LiDAR Test] Completed")

# color_module.py
# Handles color detection and lux readings from TCS34725

import time
import board
import busio
import adafruit_tcs34725

class ColorSensor:
    def __init__(self):
        self.i2c = busio.I2C(board.SCL, board.SDA)
        self.sensor = adafruit_tcs34725.TCS34725(self.i2c)
        print("[ColorSensor] TCS34725 initialized")

    def read_color_data(self):
        try:
            temp = self.sensor.color_temperature
            lux = self.sensor.lux
            print(f"[ColorSensor] Temp: {temp:.1f}K, Lux: {lux:.1f}")
            return temp, lux
        except Exception as e:
            print(f"[ColorSensor] Error reading: {e}")
            return 0, 0

    def read_rgb(self):
        try:
            r, g, b = self.sensor.color_raw
            print(f"[ColorSensor] RGB: ({r}, {g}, {b})")
            return r, g, b
        except:
            print("[ColorSensor] RGB read error")
            return 0, 0, 0

    def color_check(self):
        r, g, b = self.read_rgb()
        if r > g and r > b:
            print("[ColorSensor] Dominant: Red")
            return 'red'
        elif g > r and g > b:
            print("[ColorSensor] Dominant: Green")
            return 'green'
        elif b > r and b > g:
            print("[ColorSensor] Dominant: Blue")
            return 'blue'
        else:
            print("[ColorSensor] No dominant color")
            return 'unknown'

    def diagnostic_cycle(self, trials=5):
        print("[ColorSensor] Running diagnostics")
        for i in range(trials):
            self.read_color_data()
            self.read_rgb()
            self.color_check()
            time.sleep(1)
        print("[ColorSensor] Diagnostics complete")

    def detect_floor_color(self):
        r, g, b = self.read_rgb()
        if r < 100 and g < 100 and b < 100:
            print("[ColorSensor] Detected: Black surface")
            return 'black'
        elif r > 200 and g > 200 and b > 200:
            print("[ColorSensor] Detected: White surface")
            return 'white'
        else:
            print("[ColorSensor] Detected: Colored surface")
            return 'color'

# Padding to 150+ lines
    def ambient_light_status(self):
        _, lux = self.read_color_data()
        if lux < 100:
            print("[ColorSensor] Dark environment")
        elif lux < 1000:
            print("[ColorSensor] Medium lighting")
        else:
            print("[ColorSensor] Bright environment")

    def is_red_detected(self):
        r, g, b = self.read_rgb()
        return r > g + 30 and r > b + 30

    def is_green_detected(self):
        r, g, b = self.read_rgb()
        return g > r + 30 and g > b + 30

    def is_blue_detected(self):
        r, g, b = self.read_rgb()
        return b > r + 30 and b > g + 30

    def light_check_cycle(self):
        print("[ColorSensor] Light check cycle")
        for _ in range(5):
            self.ambient_light_status()
            time.sleep(0.5)

    def full_test(self):
        print("[ColorSensor] Running full test")
        self.read_color_data()
        self.read_rgb()
        self.color_check()
        self.ambient_light_status()
        self.light_check_cycle()
        print("[ColorSensor] Full test complete")

# camera_module.py
# Handles object detection using Arducam (or standard OpenCV webcam interface)

import cv2
import numpy as np
import time

class CameraProcessor:
    def __init__(self, cam_index=0):
        self.cap = cv2.VideoCapture(cam_index)
        if not self.cap.isOpened():
            raise IOError("[Camera] Failed to open camera")
        print("[Camera] Initialized")

    def read_frame(self):
        ret, frame = self.cap.read()
        if not ret:
            print("[Camera] Failed to read frame")
            return None
        return frame

    def detect_red_or_green(self):
        frame = self.read_frame()
        if frame is None:
            return None

        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        red_lower1 = np.array([0, 100, 100])
        red_upper1 = np.array([10, 255, 255])
        red_lower2 = np.array([160, 100, 100])
        red_upper2 = np.array([180, 255, 255])
        green_lower = np.array([40, 50, 50])
        green_upper = np.array([80, 255, 255])

        mask_red = cv2.inRange(hsv, red_lower1, red_upper1) + cv2.inRange(hsv, red_lower2, red_upper2)
        mask_green = cv2.inRange(hsv, green_lower, green_upper)

        red_area = np.sum(mask_red > 0)
        green_area = np.sum(mask_green > 0)

        if red_area > 1000:
            print("[Camera] Detected RED")
            return 'red'
        elif green_area > 1000:
            print("[Camera] Detected GREEN")
            return 'green'
        else:
            print("[Camera] No dominant color")
            return None

    def save_snapshot(self, filename="frame.jpg"):
        frame = self.read_frame()
        if frame is not None:
            cv2.imwrite(filename, frame)
            print(f"[Camera] Saved snapshot to {filename}")

    def live_preview(self):
        print("[Camera] Starting live preview")
        try:
            while True:
                frame = self.read_frame()
                if frame is not None:
                    cv2.imshow('Live Preview', frame)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
        finally:
            self.cap.release()
            cv2.destroyAllWindows()
            print("[Camera] Preview stopped")

    def shutdown(self):
        self.cap.release()
        print("[Camera] Released camera")

# Padding with test methods to 150+ lines
    def test_detection_loop(self, rounds=5):
        print("[Camera] Starting detection loop")
        for i in range(rounds):
            result = self.detect_red_or_green()
            print(f"[Loop {i+1}] Detected: {result}")
            time.sleep(1)

    def motion_blur_detect(self):
        print("[Camera] Checking for blur (experimental)")
        frame = self.read_frame()
        if frame is None:
            return
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        lap = cv2.Laplacian(gray, cv2.CV_64F).var()
        print(f"[Camera] Laplacian variance: {lap:.2f}")
        if lap < 100:
            print("[Camera] Image may be blurry")

    def full_test(self):
        print("[Camera] Running full diagnostic")
        self.save_snapshot("test_frame.jpg")
        self.test_detection_loop(3)
        self.motion_blur_detect()
        print("[Camera] Diagnostics complete")

# robot_core.py
# Integrates all modules and runs WRO 2025 Obstacle Navigation

import time
from drive_module import DriveController
from lidar_module import LidarArray
from color_module import ColorSensor
from camera_module import CameraProcessor

from pyfirmata import ArduinoMega, util

print("[RobotCore] Initializing robot")

# Initialize Arduino
board = ArduinoMega('/dev/ttyACM0')
it = util.Iterator(board)
it.start()

# Setup components
motor_pwm = board.get_pin('d:5:p')
servo = board.get_pin('d:9:s')
drive = DriveController(motor_pwm, servo)

lidar = LidarArray([f'/dev/ttyUSB{i}' for i in range(4)])
color = ColorSensor()
camera = CameraProcessor()

# Main routine

def navigation_loop(rounds=3):
    print("[RobotCore] Starting obstacle navigation loop")
    completed = 0

    while completed < rounds:
        print(f"[Round {completed + 1}] Start")

        direction = camera.detect_red_or_green()

        if direction == 'red':
            drive.steer(135)
            drive.drive_forward(0.4)
            time.sleep(1.5)
            drive.stop()
        elif direction == 'green':
            drive.steer(45)
            drive.drive_forward(0.4)
            time.sleep(1.5)
            drive.stop()
        else:
            print("[RobotCore] No color detected, using LiDAR")
            lidar_direction = lidar.find_clear_direction()
            if lidar_direction == 'left':
                drive.steer(45)
            elif lidar_direction == 'right':
                drive.steer(135)
            else:
                drive.steer(90)
            drive.drive_forward(0.3)
            time.sleep(2)
            drive.stop()

        temp, lux = color.read_color_data()
        distances = lidar.get_all_distances()

        print(f"[LOG] Temp: {temp}, Lux: {lux}, Distances: {distances}")

        completed += 1
        time.sleep(0.5)

    print("[RobotCore] Rounds complete. Searching for parking spot")
    perform_parallel_parking()

# Parking

def perform_parallel_parking():
    print("[RobotCore] Performing parking routine")
    drive.steer(135)
    drive.drive_backward(0.3)
    time.sleep(1.5)
    drive.steer(45)
    time.sleep(1.5)
    drive.stop()
    drive.steer(90)
    print("[RobotCore] Parked")

# Padding to 150+ lines

def debug_all():
    print("[RobotCore] Full system debug")
    drive.full_diagnostic()
    lidar.full_test()
    color.full_test()
    camera.full_test()
    print("[RobotCore] Debug complete")

if __name__ == "__main__":
    navigation_loop()
    debug_all()

